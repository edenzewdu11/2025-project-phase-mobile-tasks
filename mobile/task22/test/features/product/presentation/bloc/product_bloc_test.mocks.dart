// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce_ui_replication/test/features/product/presentation/bloc/product_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:contracts_of_data_sources/core/error/failure.dart' as _i6;
import 'package:contracts_of_data_sources/core/usecases/usecase_params.dart'
    as _i7;
import 'package:contracts_of_data_sources/core/util/input_converter.dart'
    as _i13;
import 'package:contracts_of_data_sources/core/util/Uuid_generator.dart' as _i14;
import 'package:contracts_of_data_sources/features/product/domain/entities/product.dart'
    as _i11;
import 'package:contracts_of_data_sources/features/product/domain/repositories/product_repository.dart'
    as _i2;
import 'package:contracts_of_data_sources/features/product/domain/usecases/create_product_usecase.dart'
    as _i4;
import 'package:contracts_of_data_sources/features/product/domain/usecases/delete_product_usecase.dart'
    as _i8;
import 'package:contracts_of_data_sources/features/product/domain/usecases/update_product_usecase.dart'
    as _i9;
import 'package:contracts_of_data_sources/features/product/domain/usecases/view_product_by_id_usecase.dart'
    as _i12;
import 'package:contracts_of_data_sources/features/product/domain/usecases/view_product_usecase.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductRepository_0 extends _i1.SmartFake
    implements _i2.ProductRepository {
  _FakeProductRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CreateProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProductUsecase extends _i1.Mock
    implements _i4.CreateProductUsecase {
  MockCreateProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(
    _i7.ProductParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
              _FakeEither_1<_i6.Failure, _i3.Unit>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}

/// A class which mocks [DeleteProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductUsecase extends _i1.Mock
    implements _i8.DeleteProductUsecase {
  MockDeleteProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(_i7.IdParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
              _FakeEither_1<_i6.Failure, _i3.Unit>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}

/// A class which mocks [UpdateProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductUsecase extends _i1.Mock
    implements _i9.UpdateProductUsecase {
  MockUpdateProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> call(
    _i7.ProductParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
              _FakeEither_1<_i6.Failure, _i3.Unit>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}

/// A class which mocks [ViewProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewProductUsecase extends _i1.Mock
    implements _i10.ViewProductUsecase {
  MockViewProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i11.Product>>> call(
    _i7.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i11.Product>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i11.Product>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i11.Product>>>);
}

/// A class which mocks [ViewProductByIdUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewProductByIdUsecase extends _i1.Mock
    implements _i12.ViewProductByIdUsecase {
  MockViewProductByIdUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.Product>> call(
    _i7.IdParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i11.Product>>.value(
                  _FakeEither_1<_i6.Failure, _i11.Product>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i11.Product>>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i13.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i6.Failure, int> stringToUnsignedInteger(String? str) =>
      (super.noSuchMethod(
            Invocation.method(#stringToUnsignedInteger, [str]),
            returnValue: _FakeEither_1<_i6.Failure, int>(
              this,
              Invocation.method(#stringToUnsignedInteger, [str]),
            ),
          )
          as _i3.Either<_i6.Failure, int>);
}

/// A class which mocks [IdGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockIdGenerator extends _i1.Mock implements _i14.IdGenerator {
  MockIdGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String generate() =>
      (super.noSuchMethod(
            Invocation.method(#generate, []),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.method(#generate, []),
            ),
          )
          as String);
}
