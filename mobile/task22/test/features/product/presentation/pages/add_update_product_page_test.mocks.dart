// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce_ui_replication/test/features/product/presentation/pages/add_update_product_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:bloc/bloc.dart' as _i12;
import 'package:contracts_of_data_sources/core/util/input_converter.dart' as _i7;
import 'package:contracts_of_data_sources/core/util/Uuid_generator.dart' as _i8;
import 'package:contracts_of_data_sources/features/product/domain/usecases/create_product_usecase.dart'
    as _i2;
import 'package:contracts_of_data_sources/features/product/domain/usecases/delete_product_usecase.dart'
    as _i3;
import 'package:contracts_of_data_sources/features/product/domain/usecases/update_product_usecase.dart'
    as _i4;
import 'package:contracts_of_data_sources/features/product/domain/usecases/view_product_by_id_usecase.dart'
    as _i6;
import 'package:contracts_of_data_sources/features/product/domain/usecases/view_product_usecase.dart'
    as _i5;
import 'package:contracts_of_data_sources/features/product/presentation/bloc/product_bloc.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCreateProductUsecase_0 extends _i1.SmartFake
    implements _i2.CreateProductUsecase {
  _FakeCreateProductUsecase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteProductUsecase_1 extends _i1.SmartFake
    implements _i3.DeleteProductUsecase {
  _FakeDeleteProductUsecase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateProductUsecase_2 extends _i1.SmartFake
    implements _i4.UpdateProductUsecase {
  _FakeUpdateProductUsecase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeViewProductUsecase_3 extends _i1.SmartFake
    implements _i5.ViewProductUsecase {
  _FakeViewProductUsecase_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeViewProductByIdUsecase_4 extends _i1.SmartFake
    implements _i6.ViewProductByIdUsecase {
  _FakeViewProductByIdUsecase_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInputConverter_5 extends _i1.SmartFake
    implements _i7.InputConverter {
  _FakeInputConverter_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIdGenerator_6 extends _i1.SmartFake implements _i8.IdGenerator {
  _FakeIdGenerator_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductBloc extends _i1.Mock implements _i9.ProductBloc {
  MockProductBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CreateProductUsecase get createProduct =>
      (super.noSuchMethod(
            Invocation.getter(#createProduct),
            returnValue: _FakeCreateProductUsecase_0(
              this,
              Invocation.getter(#createProduct),
            ),
          )
          as _i2.CreateProductUsecase);

  @override
  _i3.DeleteProductUsecase get deleteProduct =>
      (super.noSuchMethod(
            Invocation.getter(#deleteProduct),
            returnValue: _FakeDeleteProductUsecase_1(
              this,
              Invocation.getter(#deleteProduct),
            ),
          )
          as _i3.DeleteProductUsecase);

  @override
  _i4.UpdateProductUsecase get updateProduct =>
      (super.noSuchMethod(
            Invocation.getter(#updateProduct),
            returnValue: _FakeUpdateProductUsecase_2(
              this,
              Invocation.getter(#updateProduct),
            ),
          )
          as _i4.UpdateProductUsecase);

  @override
  _i5.ViewProductUsecase get viewProduct =>
      (super.noSuchMethod(
            Invocation.getter(#viewProduct),
            returnValue: _FakeViewProductUsecase_3(
              this,
              Invocation.getter(#viewProduct),
            ),
          )
          as _i5.ViewProductUsecase);

  @override
  _i6.ViewProductByIdUsecase get viewSingleProduct =>
      (super.noSuchMethod(
            Invocation.getter(#viewSingleProduct),
            returnValue: _FakeViewProductByIdUsecase_4(
              this,
              Invocation.getter(#viewSingleProduct),
            ),
          )
          as _i6.ViewProductByIdUsecase);

  @override
  _i7.InputConverter get inputConverter =>
      (super.noSuchMethod(
            Invocation.getter(#inputConverter),
            returnValue: _FakeInputConverter_5(
              this,
              Invocation.getter(#inputConverter),
            ),
          )
          as _i7.InputConverter);

  @override
  _i8.IdGenerator get idGenerator =>
      (super.noSuchMethod(
            Invocation.getter(#idGenerator),
            returnValue: _FakeIdGenerator_6(
              this,
              Invocation.getter(#idGenerator),
            ),
          )
          as _i8.IdGenerator);

  @override
  _i9.ProductState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i10.dummyValue<_i9.ProductState>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i9.ProductState);

  @override
  _i11.Stream<_i9.ProductState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i11.Stream<_i9.ProductState>.empty(),
          )
          as _i11.Stream<_i9.ProductState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i9.ProductEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i9.ProductEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i9.ProductState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i9.ProductEvent>(
    _i12.EventHandler<E, _i9.ProductState>? handler, {
    _i12.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i12.Transition<_i9.ProductEvent, _i9.ProductState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  void onChange(_i12.Change<_i9.ProductState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
